%% Window Functions
% Create arrays for x values and each type of window function
x_values = 0:20;
hann_window = 0.5 - 0.5 * cos(2 * pi * x_values / 21);
[DTFT_hann, freq_hann] = DTFT(hann_window, 1024);

hamming_window = 0.54 - 0.46 * cos(2 * pi * x_values / 21);
[DTFT_hamming, freq_hamming] = DTFT(hamming_window, 1024);

blackman_window = 0.42 - 0.5 * cos(2 * pi * x_values / 21) + 0.08 * cos(4 * pi * x_values / 21);
[DTFT_blackman, freq_blackman] = DTFT(blackman_window, 1024);

% Plot the frequency response of each window function
subplot(1,3,1)
plot(freq_hann, db(abs(DTFT_hann)));
title('Hann Window');
xlabel('Frequency (rad/sample)');
ylabel('Magnitude (dB)');

subplot(1,3,2)
plot(freq_hamming, db(abs(DTFT_hamming)));
title('Hamming Window');
xlabel('Frequency (rad/sample)');
ylabel('Magnitude (dB)');

subplot(1,3,3)
plot(freq_blackman, db(abs(DTFT_blackman)));
title('Blackman Window');
xlabel('Frequency (rad/sample)');
ylabel('Magnitude (dB)');

%% Low Pass Filter
% Create low pass filter with a cutoff frequency of 0.6 and apply it to the Hamming window
cutoff_freq = 0.6;
low_pass_filter = cutoff_freq / pi .* sinc(cutoff_freq / pi .* (x_values - 10));
hamming_filtered = low_pass_filter .* hamming_window;
[DTFT_filtered, freq_filtered] = DTFT(hamming_filtered, 0);

% Plot the filtered signal and its frequency response
figure;
subplot(1,2,1)
plot(x_values, hamming_filtered);
title({'Hamming Window','Filtered With Lowpass Filter'});
xlabel('Sample Number');
ylabel('Amplitude');

subplot(1,2,2)
plot(freq_filtered, db(abs(DTFT_filtered)));
title('Frequency Response of Filtered Signal');
xlabel('Frequency (rad/sample)');
ylabel('Magnitude (dB)');

%% Kaiser Window and Filter
% Define the attenuation A in decibels
A = -db(0.005);

% Calculate the beta parameter for the Kaiser window
beta = 0.5842*(A-21).^0.4+0.07886*(A-21);

% Calculate the length of the filter
n = ceil(1+(A-8)/(2.285*(0.4)));

% Generate the Kaiser window filter
kaiserFilter = kaiser(n,beta);

% Load the 'nspeech.mat' file
loadedSignal = load('nspeech.mat');

% Generate a lowpass filter
wc = 2.0;
lwpass = wc/pi*sinc(wc./pi*((0:42)-10));

% Apply the Kaiser window filter to the lowpass filter
filteredSignal = lwpass.*kaiserFilter';

% Convolve the filtered signal with the input signal
loadedMusic = filter(filteredSignal,1,loadedSignal.nspeech2);

% Play the filtered signal using a sampling rate of 8000 Hz 

sound(loadedMusic, 8000);
